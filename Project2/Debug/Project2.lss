
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000852  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000008c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161e  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000954  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e22  00000000  00000000  00002a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a5  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000758  00000000  00000000  00004135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000488d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a8 01 	call	0x350	; 0x350 <main>
  74:	0c 94 27 04 	jmp	0x84e	; 0x84e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:

u8 Red_flag = 0 ;

u8 app_init (void)
{
	app_state = ok ;
  7c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	flag = start_state ; 
  80:	85 e0       	ldi	r24, 0x05	; 5
  82:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flag>
	led_int(cars_led,red);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 89 01 	call	0x312	; 0x312 <led_int>
	led_int(cars_led,yellow);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 89 01 	call	0x312	; 0x312 <led_int>
	led_int(cars_led,green);
  96:	62 e0       	ldi	r22, 0x02	; 2
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 89 01 	call	0x312	; 0x312 <led_int>
	
	led_int(pedestrians_led,red);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 89 01 	call	0x312	; 0x312 <led_int>
	led_int(pedestrians_led,yellow);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 89 01 	call	0x312	; 0x312 <led_int>
	led_int(pedestrians_led,green);
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 89 01 	call	0x312	; 0x312 <led_int>
	
	ButtonInit(pedestrian_button,crosswalk_button);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ButtonInit>
	interrupt0init();
  be:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <interrupt0init>
	return app_state ;
	
}
  c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
  c6:	08 95       	ret

000000c8 <set_for_car_stop_for_pedestrians>:
u8 set_for_car_stop_for_pedestrians (void)
{
	app_state = ok ;
  c8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	if (reset==1)
  cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reset>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	b9 f0       	breq	.+46     	; 0x102 <set_for_car_stop_for_pedestrians+0x3a>
	{
		return Not_ok ;
	}
	led_on(cars_led,green);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 91 01 	call	0x322	; 0x322 <led_on>
	led_on(pedestrians_led,red);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 91 01 	call	0x322	; 0x322 <led_on>
	flag = on ;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flag>
	timer_5Sec();
  ea:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <timer_5Sec>
	led_off(cars_led,green);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(pedestrians_led,red);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	return app_state ;
  fe:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
	
}
 102:	08 95       	ret

00000104 <toggle_for_car_stop_for_pedestrians>:
u8 toggle_for_car_stop_for_pedestrians (void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
	app_state = ok ;
 108:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	if (reset==1)
 10c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reset>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f1       	breq	.+66     	; 0x156 <toggle_for_car_stop_for_pedestrians+0x52>
	{
		return Not_ok ;
	}
	led_on(pedestrians_led,red);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 91 01 	call	0x322	; 0x322 <led_on>
	flag = on ;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flag>
	for(int i = 0 ; i<10 ; i++)
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	0a c0       	rjmp	.+20     	; 0x13c <toggle_for_car_stop_for_pedestrians+0x38>
	{
		led_toggle(cars_led,yellow);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 a1 01 	call	0x342	; 0x342 <led_toggle>
		flag = on ;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flag>
		timer_500mSec();
 136:	0e 94 b4 03 	call	0x768	; 0x768 <timer_500mSec>
	{
		return Not_ok ;
	}
	led_on(pedestrians_led,red);
	flag = on ;
	for(int i = 0 ; i<10 ; i++)
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	ca 30       	cpi	r28, 0x0A	; 10
 13e:	d1 05       	cpc	r29, r1
 140:	9c f3       	brlt	.-26     	; 0x128 <toggle_for_car_stop_for_pedestrians+0x24>
		led_toggle(cars_led,yellow);
		flag = on ;
		timer_500mSec();
		
	}
		led_off(cars_led,yellow);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
		led_off(pedestrians_led,red);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
		return app_state ;
 152:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
	
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <stop_for_car_set_for_pedestrians>:
u8 stop_for_car_set_for_pedestrians (void)
{
	app_state = ok ;
 15c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	if (reset==1)
 160:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reset>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	b9 f0       	breq	.+46     	; 0x196 <stop_for_car_set_for_pedestrians+0x3a>
	{
		return Not_ok ;
	}
	flag = start_state ;
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flag>
	led_on(pedestrians_led,green);
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 91 01 	call	0x322	; 0x322 <led_on>
	led_on(cars_led,red);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 91 01 	call	0x322	; 0x322 <led_on>
	timer_5Sec();
 17e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <timer_5Sec>
	
	led_off(pedestrians_led,green);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(cars_led,red);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	return app_state ;
 192:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
	
}
 196:	08 95       	ret

00000198 <toggle_for_car_set_for_pedestrians>:
u8 toggle_for_car_set_for_pedestrians (void)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	app_state = ok ;
 19c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	if (reset==1)
 1a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reset>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	f9 f0       	breq	.+62     	; 0x1e6 <toggle_for_car_set_for_pedestrians+0x4e>
	{
		return Not_ok ;
	}
	led_on(pedestrians_led,green);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 91 01 	call	0x322	; 0x322 <led_on>
	flag = off ;
 1b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag>
	for(int i = 0 ; i<10 ; i++)
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <toggle_for_car_set_for_pedestrians+0x34>
	{
		led_toggle(cars_led,yellow);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 a1 01 	call	0x342	; 0x342 <led_toggle>
		flag = off ;
 1c2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag>
		timer_500mSec();
 1c6:	0e 94 b4 03 	call	0x768	; 0x768 <timer_500mSec>
	{
		return Not_ok ;
	}
	led_on(pedestrians_led,green);
	flag = off ;
	for(int i = 0 ; i<10 ; i++)
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	ca 30       	cpi	r28, 0x0A	; 10
 1ce:	d1 05       	cpc	r29, r1
 1d0:	a4 f3       	brlt	.-24     	; 0x1ba <toggle_for_car_set_for_pedestrians+0x22>
		led_toggle(cars_led,yellow);
		flag = off ;
		timer_500mSec();
		
	}
	led_off(cars_led,yellow);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(pedestrians_led,green);
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	return app_state ;
 1e2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
	
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <pedestrians_mode>:
u8 pedestrians_mode (void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	app_state = ok ;
 1f0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	
	led_off(cars_led,red);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(pedestrians_led,red);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(cars_led,green);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(pedestrians_led,green);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	
	for(int i = 0 ; i<10 ; i++)
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	0b c0       	rjmp	.+22     	; 0x230 <pedestrians_mode+0x44>
	{
		led_toggle(cars_led,yellow);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 a1 01 	call	0x342	; 0x342 <led_toggle>
		led_toggle(pedestrians_led,yellow);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 a1 01 	call	0x342	; 0x342 <led_toggle>
		timer_500mSec();
 22a:	0e 94 b4 03 	call	0x768	; 0x768 <timer_500mSec>
	led_off(cars_led,red);
	led_off(pedestrians_led,red);
	led_off(cars_led,green);
	led_off(pedestrians_led,green);
	
	for(int i = 0 ; i<10 ; i++)
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	ca 30       	cpi	r28, 0x0A	; 10
 232:	d1 05       	cpc	r29, r1
 234:	94 f3       	brlt	.-28     	; 0x21a <pedestrians_mode+0x2e>
	{
		led_toggle(cars_led,yellow);
		led_toggle(pedestrians_led,yellow);
		timer_500mSec();
		}
	led_off(cars_led,yellow);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	led_off(pedestrians_led,yellow);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 99 01 	call	0x332	; 0x332 <led_off>
	return app_state ;
}
 246:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <normal_mode>:
u8 normal_mode (void)
{
	app_state = ok ;
 250:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <app_state>
	set_for_car_stop_for_pedestrians();
 254:	0e 94 64 00 	call	0xc8	; 0xc8 <set_for_car_stop_for_pedestrians>
	toggle_for_car_stop_for_pedestrians();
 258:	0e 94 82 00 	call	0x104	; 0x104 <toggle_for_car_stop_for_pedestrians>
	stop_for_car_set_for_pedestrians();
 25c:	0e 94 ae 00 	call	0x15c	; 0x15c <stop_for_car_set_for_pedestrians>
	toggle_for_car_set_for_pedestrians();
 260:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_for_car_set_for_pedestrians>
	return app_state ;
	
}
 264:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <app_state>
 268:	08 95       	ret

0000026a <__vector_1>:
ISR(EXT_INT_0)
{ButtonRread(pedestrian_button,crosswalk_button,&state);
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	44 e6       	ldi	r20, 0x64	; 100
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	0e 94 82 01 	call	0x304	; 0x304 <ButtonRread>
	
	timer_250mSec();
 298:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <timer_250mSec>
	ButtonRread(pedestrian_button,crosswalk_button,&state);
 29c:	44 e6       	ldi	r20, 0x64	; 100
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 82 01 	call	0x304	; 0x304 <ButtonRread>
	
	if (state==0)
 2a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
 2ac:	81 11       	cpse	r24, r1
 2ae:	11 c0       	rjmp	.+34     	; 0x2d2 <__vector_1+0x68>
	{
		if (flag ==start_state)
 2b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flag>
 2b4:	85 30       	cpi	r24, 0x05	; 5
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <__vector_1+0x68>
		{
			//do no thing
		}
		else if(flag ==off)
 2b8:	88 23       	and	r24, r24
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <__vector_1+0x68>
		{
			//do no thing
		}
		else if (flag ==on)
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	49 f4       	brne	.+18     	; 0x2d2 <__vector_1+0x68>
		{
			pedestrians_mode ();
 2c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <pedestrians_mode>
			stop_for_car_set_for_pedestrians();
 2c4:	0e 94 ae 00 	call	0x15c	; 0x15c <stop_for_car_set_for_pedestrians>
			toggle_for_car_set_for_pedestrians();
 2c8:	0e 94 cc 00 	call	0x198	; 0x198 <toggle_for_car_set_for_pedestrians>
			reset=1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <reset>
	else
	{
		//do no thing
	}

}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <ButtonInit>:
#include "button.h"


u8 ButtonInit( u8 buttonPort , u8 buttonPin )
{
	button_state = ok ;
 2f4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <button_state>
	DIO_init(buttonPort , buttonPin , input);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	return 	button_state ;

}
 2fe:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <button_state>
 302:	08 95       	ret

00000304 <ButtonRread>:

u8 ButtonRread( u8 buttonPort , u8 buttonPin , u8 * button_st )
{
	button_state = ok ;
 304:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <button_state>
	DIO_read(buttonPort,buttonPin, button_st);
 308:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_read>
	return 	button_state ;
 30c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <button_state>
 310:	08 95       	ret

00000312 <led_int>:
 */ 
#include "led.h"

u8 led_int( u8 ledPort , u8 ledPin ) 
{
	led_state = ok ;
 312:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_state>
	DIO_init(ledPort , ledPin , output);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	return led_state ;
}
 31c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
 320:	08 95       	ret

00000322 <led_on>:
u8 led_on( u8 ledPort , u8 ledPin ) 
{
	led_state = ok ;
 322:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_state>
	DIO_write(ledPort , ledPin , high);
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	0e 94 3a 02 	call	0x474	; 0x474 <DIO_write>
	return led_state ;
}
 32c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
 330:	08 95       	ret

00000332 <led_off>:

u8 led_off( u8 ledPort , u8 ledPin ) 
{
	led_state = ok ;
 332:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_state>
	DIO_write(ledPort , ledPin , low);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	0e 94 3a 02 	call	0x474	; 0x474 <DIO_write>
	return led_state ;
}
 33c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
 340:	08 95       	ret

00000342 <led_toggle>:
u8 led_toggle( u8 ledPort , u8 ledPin )
{
	led_state = ok ;
 342:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_state>
	DIO_toggle(ledPort,ledPin);
 346:	0e 94 2b 03 	call	0x656	; 0x656 <DIO_toggle>
	return led_state ;
}
 34a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
 34e:	08 95       	ret

00000350 <main>:
#include "app/app.h"


int main(void)
{
    app_init ();
 350:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
    while (1) 
    {
		
		flag=start_state;
 354:	85 e0       	ldi	r24, 0x05	; 5
 356:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <flag>
		normal_mode();
 35a:	0e 94 28 01 	call	0x250	; 0x250 <normal_mode>
		reset=0;
 35e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <reset>
 362:	f8 cf       	rjmp	.-16     	; 0x354 <main+0x4>

00000364 <DIO_init>:
 */ 
#include "dio.h"

u8 DIO_init(u8 PortNumber , u8 PinNumber , u8 direction)
{
	error_state = ok ;
 364:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <error_state>
	
	 if (direction == input)
 368:	41 11       	cpse	r20, r1
 36a:	40 c0       	rjmp	.+128    	; 0x3ec <DIO_init+0x88>
	 {
		 switch (PortNumber) 
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	99 f0       	breq	.+38     	; 0x396 <DIO_init+0x32>
 370:	28 f0       	brcs	.+10     	; 0x37c <DIO_init+0x18>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	e9 f0       	breq	.+58     	; 0x3b0 <DIO_init+0x4c>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	41 f1       	breq	.+80     	; 0x3ca <DIO_init+0x66>
 37a:	34 c0       	rjmp	.+104    	; 0x3e4 <DIO_init+0x80>
		 {
			 case PORT_A :DDRA= CLR_BIT (DDRA,PinNumber);break;
 37c:	2a b3       	in	r18, 0x1a	; 26
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_init+0x24>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_init+0x20>
 38c:	80 95       	com	r24
 38e:	82 23       	and	r24, r18
 390:	8a bb       	out	0x1a, r24	; 26
 392:	8a bb       	out	0x1a, r24	; 26
 394:	6c c0       	rjmp	.+216    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 case PORT_B :DDRB= CLR_BIT (DDRB,PinNumber);break;
 396:	27 b3       	in	r18, 0x17	; 23
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_init+0x3e>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_init+0x3a>
 3a6:	80 95       	com	r24
 3a8:	82 23       	and	r24, r18
 3aa:	87 bb       	out	0x17, r24	; 23
 3ac:	87 bb       	out	0x17, r24	; 23
 3ae:	5f c0       	rjmp	.+190    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 case PORT_C: DDRC= CLR_BIT (DDRC,PinNumber);break;
 3b0:	24 b3       	in	r18, 0x14	; 20
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_init+0x58>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_init+0x54>
 3c0:	80 95       	com	r24
 3c2:	82 23       	and	r24, r18
 3c4:	84 bb       	out	0x14, r24	; 20
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	52 c0       	rjmp	.+164    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 case PORT_D :DDRD= CLR_BIT (DDRD,PinNumber);break;
 3ca:	21 b3       	in	r18, 0x11	; 17
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_init+0x72>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_init+0x6e>
 3da:	80 95       	com	r24
 3dc:	82 23       	and	r24, r18
 3de:	81 bb       	out	0x11, r24	; 17
 3e0:	81 bb       	out	0x11, r24	; 17
 3e2:	45 c0       	rjmp	.+138    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 default:error_state = Not_ok ;break;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
 3ea:	41 c0       	rjmp	.+130    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
		 }
		 
	 }else if (direction==output) 
 3ec:	41 30       	cpi	r20, 0x01	; 1
 3ee:	e1 f5       	brne	.+120    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	 {
		 switch (PortNumber)
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	91 f0       	breq	.+36     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f4:	28 f0       	brcs	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	d9 f0       	breq	.+54     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	29 f1       	breq	.+74     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3fe:	30 c0       	rjmp	.+96     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		 {
			 case PORT_A :DDRA= SET_BIT (DDRA,PinNumber);break;
 400:	2a b3       	in	r18, 0x1a	; 26
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	82 2b       	or	r24, r18
 412:	8a bb       	out	0x1a, r24	; 26
 414:	8a bb       	out	0x1a, r24	; 26
 416:	2b c0       	rjmp	.+86     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 case PORT_B :DDRB= SET_BIT (DDRB,PinNumber);break;
 418:	27 b3       	in	r18, 0x17	; 23
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	82 2b       	or	r24, r18
 42a:	87 bb       	out	0x17, r24	; 23
 42c:	87 bb       	out	0x17, r24	; 23
 42e:	1f c0       	rjmp	.+62     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 case PORT_C: DDRC= SET_BIT (DDRC,PinNumber);break;
 430:	24 b3       	in	r18, 0x14	; 20
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	82 2b       	or	r24, r18
 442:	84 bb       	out	0x14, r24	; 20
 444:	84 bb       	out	0x14, r24	; 20
 446:	13 c0       	rjmp	.+38     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 case PORT_D :DDRD= SET_BIT (DDRD,PinNumber);break;
 448:	21 b3       	in	r18, 0x11	; 17
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	82 2b       	or	r24, r18
 45a:	81 bb       	out	0x11, r24	; 17
 45c:	81 bb       	out	0x11, r24	; 17
 45e:	07 c0       	rjmp	.+14     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			 default:error_state = Not_ok ;break;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
 466:	03 c0       	rjmp	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>

		 }
      }else
	  {
		  //error
		  error_state = Not_ok ;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>

	  } 
	  return error_state ;
}
 46e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_state>
 472:	08 95       	ret

00000474 <DIO_write>:
u8 DIO_write(u8 PortNumber , u8 PinNumber , u8 value)
{
	error_state = ok ;
 474:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <error_state>
	if (value == low)
 478:	41 11       	cpse	r20, r1
 47a:	40 c0       	rjmp	.+128    	; 0x4fc <DIO_write+0x88>
	{
		switch (PortNumber)
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	99 f0       	breq	.+38     	; 0x4a6 <DIO_write+0x32>
 480:	28 f0       	brcs	.+10     	; 0x48c <DIO_write+0x18>
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	e9 f0       	breq	.+58     	; 0x4c0 <DIO_write+0x4c>
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	41 f1       	breq	.+80     	; 0x4da <DIO_write+0x66>
 48a:	34 c0       	rjmp	.+104    	; 0x4f4 <DIO_write+0x80>
		{
			case PORT_A :PORTA= CLR_BIT (PORTA,PinNumber);break;
 48c:	2b b3       	in	r18, 0x1b	; 27
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_write+0x24>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_write+0x20>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	8b bb       	out	0x1b, r24	; 27
 4a2:	8b bb       	out	0x1b, r24	; 27
 4a4:	6c c0       	rjmp	.+216    	; 0x57e <DIO_write+0x10a>
			case PORT_B :PORTB= CLR_BIT (PORTB,PinNumber);break;
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_write+0x3e>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_write+0x3a>
 4b6:	80 95       	com	r24
 4b8:	82 23       	and	r24, r18
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	88 bb       	out	0x18, r24	; 24
 4be:	5f c0       	rjmp	.+190    	; 0x57e <DIO_write+0x10a>
			case PORT_C: PORTC= CLR_BIT (PORTC,PinNumber);break;
 4c0:	25 b3       	in	r18, 0x15	; 21
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_write+0x58>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_write+0x54>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	85 bb       	out	0x15, r24	; 21
 4d6:	85 bb       	out	0x15, r24	; 21
 4d8:	52 c0       	rjmp	.+164    	; 0x57e <DIO_write+0x10a>
			case PORT_D :PORTD= CLR_BIT (PORTD,PinNumber);break;
 4da:	22 b3       	in	r18, 0x12	; 18
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_write+0x72>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_write+0x6e>
 4ea:	80 95       	com	r24
 4ec:	82 23       	and	r24, r18
 4ee:	82 bb       	out	0x12, r24	; 18
 4f0:	82 bb       	out	0x12, r24	; 18
 4f2:	45 c0       	rjmp	.+138    	; 0x57e <DIO_write+0x10a>
			default:error_state = Not_ok ;break;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
 4fa:	41 c0       	rjmp	.+130    	; 0x57e <DIO_write+0x10a>
		}
		
	}else if (value==high)
 4fc:	41 30       	cpi	r20, 0x01	; 1
 4fe:	e1 f5       	brne	.+120    	; 0x578 <DIO_write+0x104>
	{
		switch (PortNumber)
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	91 f0       	breq	.+36     	; 0x528 <DIO_write+0xb4>
 504:	28 f0       	brcs	.+10     	; 0x510 <DIO_write+0x9c>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	d9 f0       	breq	.+54     	; 0x540 <DIO_write+0xcc>
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	29 f1       	breq	.+74     	; 0x558 <DIO_write+0xe4>
 50e:	30 c0       	rjmp	.+96     	; 0x570 <DIO_write+0xfc>
		{
			case PORT_A :PORTA= SET_BIT (PORTA,PinNumber);break;
 510:	2b b3       	in	r18, 0x1b	; 27
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_write+0xa8>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_write+0xa4>
 520:	82 2b       	or	r24, r18
 522:	8b bb       	out	0x1b, r24	; 27
 524:	8b bb       	out	0x1b, r24	; 27
 526:	2b c0       	rjmp	.+86     	; 0x57e <DIO_write+0x10a>
			case PORT_B :PORTB= SET_BIT (PORTB,PinNumber);break;
 528:	28 b3       	in	r18, 0x18	; 24
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_write+0xc0>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_write+0xbc>
 538:	82 2b       	or	r24, r18
 53a:	88 bb       	out	0x18, r24	; 24
 53c:	88 bb       	out	0x18, r24	; 24
 53e:	1f c0       	rjmp	.+62     	; 0x57e <DIO_write+0x10a>
			case PORT_C: PORTC= SET_BIT (PORTC,PinNumber);break;
 540:	25 b3       	in	r18, 0x15	; 21
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_write+0xd8>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_write+0xd4>
 550:	82 2b       	or	r24, r18
 552:	85 bb       	out	0x15, r24	; 21
 554:	85 bb       	out	0x15, r24	; 21
 556:	13 c0       	rjmp	.+38     	; 0x57e <DIO_write+0x10a>
			case PORT_D :PORTD= SET_BIT (PORTD,PinNumber);break;
 558:	22 b3       	in	r18, 0x12	; 18
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_write+0xf0>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_write+0xec>
 568:	82 2b       	or	r24, r18
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	82 bb       	out	0x12, r24	; 18
 56e:	07 c0       	rjmp	.+14     	; 0x57e <DIO_write+0x10a>
			default:error_state = Not_ok ;break;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
 576:	03 c0       	rjmp	.+6      	; 0x57e <DIO_write+0x10a>
			
		}
	}else
	{
		//error
		error_state = Not_ok ;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
	}
	return error_state ;
}
 57e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_state>
 582:	08 95       	ret

00000584 <DIO_read>:
u8 DIO_read(u8 PortNumber , u8 PinNumber , u8 * value)
{
	error_state = ok ;
 584:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <error_state>
	switch (PortNumber)
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	e9 f0       	breq	.+58     	; 0x5c6 <DIO_read+0x42>
 58c:	30 f0       	brcs	.+12     	; 0x59a <DIO_read+0x16>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	81 f1       	breq	.+96     	; 0x5f2 <DIO_read+0x6e>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_read+0x14>
 596:	43 c0       	rjmp	.+134    	; 0x61e <DIO_read+0x9a>
 598:	58 c0       	rjmp	.+176    	; 0x64a <DIO_read+0xc6>
	{
		case PORT_A : * value = GET_BIT(PINA,PinNumber);break;
 59a:	79 b3       	in	r23, 0x19	; 25
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	9c 01       	movw	r18, r24
 5a2:	06 2e       	mov	r0, r22
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_read+0x26>
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_read+0x22>
 5ae:	87 2f       	mov	r24, r23
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	82 23       	and	r24, r18
 5b4:	93 23       	and	r25, r19
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_read+0x38>
 5b8:	95 95       	asr	r25
 5ba:	87 95       	ror	r24
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_read+0x34>
 5c0:	fa 01       	movw	r30, r20
 5c2:	80 83       	st	Z, r24
 5c4:	45 c0       	rjmp	.+138    	; 0x650 <DIO_read+0xcc>
		case PORT_B : * value = GET_BIT(PINB,PinNumber);break;
 5c6:	76 b3       	in	r23, 0x16	; 22
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	9c 01       	movw	r18, r24
 5ce:	06 2e       	mov	r0, r22
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_read+0x52>
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_read+0x4e>
 5da:	87 2f       	mov	r24, r23
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	82 23       	and	r24, r18
 5e0:	93 23       	and	r25, r19
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_read+0x64>
 5e4:	95 95       	asr	r25
 5e6:	87 95       	ror	r24
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_read+0x60>
 5ec:	fa 01       	movw	r30, r20
 5ee:	80 83       	st	Z, r24
 5f0:	2f c0       	rjmp	.+94     	; 0x650 <DIO_read+0xcc>
		case PORT_C : * value = GET_BIT(PINC,PinNumber);break;
 5f2:	73 b3       	in	r23, 0x13	; 19
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	9c 01       	movw	r18, r24
 5fa:	06 2e       	mov	r0, r22
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_read+0x7e>
 5fe:	22 0f       	add	r18, r18
 600:	33 1f       	adc	r19, r19
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_read+0x7a>
 606:	87 2f       	mov	r24, r23
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	82 23       	and	r24, r18
 60c:	93 23       	and	r25, r19
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_read+0x90>
 610:	95 95       	asr	r25
 612:	87 95       	ror	r24
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_read+0x8c>
 618:	fa 01       	movw	r30, r20
 61a:	80 83       	st	Z, r24
 61c:	19 c0       	rjmp	.+50     	; 0x650 <DIO_read+0xcc>
		case PORT_D : * value = GET_BIT(PIND,PinNumber);break;
 61e:	70 b3       	in	r23, 0x10	; 16
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	9c 01       	movw	r18, r24
 626:	06 2e       	mov	r0, r22
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_read+0xaa>
 62a:	22 0f       	add	r18, r18
 62c:	33 1f       	adc	r19, r19
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_read+0xa6>
 632:	87 2f       	mov	r24, r23
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	82 23       	and	r24, r18
 638:	93 23       	and	r25, r19
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_read+0xbc>
 63c:	95 95       	asr	r25
 63e:	87 95       	ror	r24
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_read+0xb8>
 644:	fa 01       	movw	r30, r20
 646:	80 83       	st	Z, r24
 648:	03 c0       	rjmp	.+6      	; 0x650 <DIO_read+0xcc>
		default:error_state = Not_ok;break;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
	}
	return error_state ;
}
 650:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_state>
 654:	08 95       	ret

00000656 <DIO_toggle>:
u8 DIO_toggle(u8 PortNumber , u8 PinNumber )
{
	error_state = ok ;
 656:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <error_state>
	switch (PortNumber)
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	91 f0       	breq	.+36     	; 0x682 <DIO_toggle+0x2c>
 65e:	28 f0       	brcs	.+10     	; 0x66a <DIO_toggle+0x14>
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	d9 f0       	breq	.+54     	; 0x69a <DIO_toggle+0x44>
 664:	83 30       	cpi	r24, 0x03	; 3
 666:	29 f1       	breq	.+74     	; 0x6b2 <DIO_toggle+0x5c>
 668:	30 c0       	rjmp	.+96     	; 0x6ca <DIO_toggle+0x74>
	{
		case PORT_A :PORTA= TOGGLE_BIT (PORTA,PinNumber);break;
 66a:	2b b3       	in	r18, 0x1b	; 27
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_toggle+0x20>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_toggle+0x1c>
 67a:	82 27       	eor	r24, r18
 67c:	8b bb       	out	0x1b, r24	; 27
 67e:	8b bb       	out	0x1b, r24	; 27
 680:	27 c0       	rjmp	.+78     	; 0x6d0 <DIO_toggle+0x7a>
		case PORT_B :PORTB= TOGGLE_BIT (PORTB,PinNumber);break;
 682:	28 b3       	in	r18, 0x18	; 24
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_toggle+0x38>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	6a 95       	dec	r22
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_toggle+0x34>
 692:	82 27       	eor	r24, r18
 694:	88 bb       	out	0x18, r24	; 24
 696:	88 bb       	out	0x18, r24	; 24
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <DIO_toggle+0x7a>
		case PORT_C: PORTC= TOGGLE_BIT (PORTC,PinNumber);break;
 69a:	25 b3       	in	r18, 0x15	; 21
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_toggle+0x50>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_toggle+0x4c>
 6aa:	82 27       	eor	r24, r18
 6ac:	85 bb       	out	0x15, r24	; 21
 6ae:	85 bb       	out	0x15, r24	; 21
 6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <DIO_toggle+0x7a>
		case PORT_D :PORTD= TOGGLE_BIT (PORTD,PinNumber);break;
 6b2:	22 b3       	in	r18, 0x12	; 18
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_toggle+0x68>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_toggle+0x64>
 6c2:	82 27       	eor	r24, r18
 6c4:	82 bb       	out	0x12, r24	; 18
 6c6:	82 bb       	out	0x12, r24	; 18
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <DIO_toggle+0x7a>
		default:error_state = Not_ok;break;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_state>
	}
	return error_state ;
}
 6d0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_state>
 6d4:	08 95       	ret

000006d6 <interrupt0init>:
 *  Author: ayman
 */ 
#include "../interrupt/Interrupt.h"
u8 interrupt0init (void)
{
	interrupt_state = ok ;
 6d6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <interrupt_state>
	// enable global interrupt
	SET_BIT(SREG,7);
 6da:	8f b7       	in	r24, 0x3f	; 63
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	8f bf       	out	0x3f, r24	; 63
	
	//chose interrupt sense by ISC00 , ISC01
	// for rising edge
	SET_BIT(MCUCR,ISC00);SET_BIT(MCUCR,ISC01);
 6e0:	85 b7       	in	r24, 0x35	; 53
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	85 bf       	out	0x35, r24	; 53
 6e6:	85 b7       	in	r24, 0x35	; 53
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	85 bf       	out	0x35, r24	; 53
	
	//enable external interrupt
	SET_BIT(GICR,INT0);
 6ec:	8b b7       	in	r24, 0x3b	; 59
 6ee:	80 64       	ori	r24, 0x40	; 64
 6f0:	8b bf       	out	0x3b, r24	; 59
	return interrupt_state ;
}
 6f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <interrupt_state>
 6f6:	08 95       	ret

000006f8 <timer_5Sec>:


 
 u8 timer_5Sec (void)
 {
	 timer_state = ok ;
 6f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	 /*for normal mode */
	 TCCR0 = CLR_BIT(TCCR0,TCCR0_WGM00);
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	8f 7b       	andi	r24, 0xBF	; 191
 700:	83 bf       	out	0x33, r24	; 51
 702:	83 bf       	out	0x33, r24	; 51
	 TCCR0 = CLR_BIT(TCCR0,TCCR0_WGM01);
 704:	83 b7       	in	r24, 0x33	; 51
 706:	87 7f       	andi	r24, 0xF7	; 247
 708:	83 bf       	out	0x33, r24	; 51
 70a:	83 bf       	out	0x33, r24	; 51
	 TCNT0 = periodic_5_Sec;
 70c:	83 ed       	ldi	r24, 0xD3	; 211
 70e:	82 bf       	out	0x32, r24	; 50
	 
       /*for 64 prescaler */
	 TCCR0=SET_BIT(TCCR0,TCCR0_CS00);
 710:	83 b7       	in	r24, 0x33	; 51
 712:	81 60       	ori	r24, 0x01	; 1
 714:	83 bf       	out	0x33, r24	; 51
 716:	83 bf       	out	0x33, r24	; 51
	 TCCR0=SET_BIT(TCCR0,TCCR0_CS01);
 718:	83 b7       	in	r24, 0x33	; 51
 71a:	82 60       	ori	r24, 0x02	; 2
 71c:	83 bf       	out	0x33, r24	; 51
 71e:	83 bf       	out	0x33, r24	; 51
	 TCCR0=CLR_BIT(TCCR0,TCCR0_CS02);
 720:	83 b7       	in	r24, 0x33	; 51
 722:	8b 7f       	andi	r24, 0xFB	; 251
 724:	83 bf       	out	0x33, r24	; 51
 726:	83 bf       	out	0x33, r24	; 51
     u32 counter = 0 ;
 728:	40 e0       	ldi	r20, 0x00	; 0
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	ba 01       	movw	r22, r20
	 while (counter!=no_of_over_flow_for_5_Sec)
 72e:	11 c0       	rjmp	.+34     	; 0x752 <timer_5Sec+0x5a>
	 {
		 while((TIFR=GET_BIT(TIFR,TOV0))==0);
 730:	88 b7       	in	r24, 0x38	; 56
 732:	81 70       	andi	r24, 0x01	; 1
 734:	88 bf       	out	0x38, r24	; 56
 736:	88 23       	and	r24, r24
 738:	d9 f3       	breq	.-10     	; 0x730 <timer_5Sec+0x38>
		 TIFR = SET_BIT(TIFR,TOV0);
 73a:	88 b7       	in	r24, 0x38	; 56
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	88 bf       	out	0x38, r24	; 56
 740:	88 bf       	out	0x38, r24	; 56
		 counter++;
 742:	4f 5f       	subi	r20, 0xFF	; 255
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	6f 4f       	sbci	r22, 0xFF	; 255
 748:	7f 4f       	sbci	r23, 0xFF	; 255
		 if (reset==1)
 74a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reset>
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	31 f0       	breq	.+12     	; 0x75e <timer_5Sec+0x66>
       /*for 64 prescaler */
	 TCCR0=SET_BIT(TCCR0,TCCR0_CS00);
	 TCCR0=SET_BIT(TCCR0,TCCR0_CS01);
	 TCCR0=CLR_BIT(TCCR0,TCCR0_CS02);
     u32 counter = 0 ;
	 while (counter!=no_of_over_flow_for_5_Sec)
 752:	42 33       	cpi	r20, 0x32	; 50
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	58 07       	cpc	r21, r24
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	49 f7       	brne	.-46     	; 0x730 <timer_5Sec+0x38>
		 if (reset==1)
		 {
			 break;
		 }
	 }
	 TCNT0 = periodic_5_Sec;
 75e:	83 ed       	ldi	r24, 0xD3	; 211
 760:	82 bf       	out	0x32, r24	; 50
	 counter = 0;
	 return timer_state ;
	 
 }
 762:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 766:	08 95       	ret

00000768 <timer_500mSec>:
 
 u8 timer_500mSec (void)
 {
	 timer_state = ok ;
 768:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	 /*for normal mode */
	 TCCR0 = CLR_BIT(TCCR0,TCCR0_WGM00);
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	8f 7b       	andi	r24, 0xBF	; 191
 770:	83 bf       	out	0x33, r24	; 51
 772:	83 bf       	out	0x33, r24	; 51
	 TCCR0 = CLR_BIT(TCCR0,TCCR0_WGM01);
 774:	83 b7       	in	r24, 0x33	; 51
 776:	87 7f       	andi	r24, 0xF7	; 247
 778:	83 bf       	out	0x33, r24	; 51
 77a:	83 bf       	out	0x33, r24	; 51
	 TCNT0 = periodic_500m_Sec;
 77c:	8c ed       	ldi	r24, 0xDC	; 220
 77e:	82 bf       	out	0x32, r24	; 50
	 
	 /*for 8 prescaler */
	 TCCR0=CLR_BIT(TCCR0,TCCR0_CS00);
 780:	83 b7       	in	r24, 0x33	; 51
 782:	8e 7f       	andi	r24, 0xFE	; 254
 784:	83 bf       	out	0x33, r24	; 51
 786:	83 bf       	out	0x33, r24	; 51
	 TCCR0=SET_BIT(TCCR0,TCCR0_CS01);
 788:	83 b7       	in	r24, 0x33	; 51
 78a:	82 60       	ori	r24, 0x02	; 2
 78c:	83 bf       	out	0x33, r24	; 51
 78e:	83 bf       	out	0x33, r24	; 51
	 TCCR0=CLR_BIT(TCCR0,TCCR0_CS02);
 790:	83 b7       	in	r24, 0x33	; 51
 792:	8b 7f       	andi	r24, 0xFB	; 251
 794:	83 bf       	out	0x33, r24	; 51
 796:	83 bf       	out	0x33, r24	; 51
	 u32 counter = 0 ;
 798:	40 e0       	ldi	r20, 0x00	; 0
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	ba 01       	movw	r22, r20
	 while (counter!=no_of_over_flow_for_500m_Sec)
 79e:	11 c0       	rjmp	.+34     	; 0x7c2 <timer_500mSec+0x5a>
	 {
		 while((TIFR=GET_BIT(TIFR,TOV0))==0);
 7a0:	88 b7       	in	r24, 0x38	; 56
 7a2:	81 70       	andi	r24, 0x01	; 1
 7a4:	88 bf       	out	0x38, r24	; 56
 7a6:	88 23       	and	r24, r24
 7a8:	d9 f3       	breq	.-10     	; 0x7a0 <timer_500mSec+0x38>
		 TIFR = SET_BIT(TIFR,TOV0);
 7aa:	88 b7       	in	r24, 0x38	; 56
 7ac:	81 60       	ori	r24, 0x01	; 1
 7ae:	88 bf       	out	0x38, r24	; 56
 7b0:	88 bf       	out	0x38, r24	; 56
		 counter++;
 7b2:	4f 5f       	subi	r20, 0xFF	; 255
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	6f 4f       	sbci	r22, 0xFF	; 255
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
		 if (reset==1)
 7ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reset>
 7be:	81 30       	cpi	r24, 0x01	; 1
 7c0:	29 f0       	breq	.+10     	; 0x7cc <timer_500mSec+0x64>
	 /*for 8 prescaler */
	 TCCR0=CLR_BIT(TCCR0,TCCR0_CS00);
	 TCCR0=SET_BIT(TCCR0,TCCR0_CS01);
	 TCCR0=CLR_BIT(TCCR0,TCCR0_CS02);
	 u32 counter = 0 ;
	 while (counter!=no_of_over_flow_for_500m_Sec)
 7c2:	45 3f       	cpi	r20, 0xF5	; 245
 7c4:	51 05       	cpc	r21, r1
 7c6:	61 05       	cpc	r22, r1
 7c8:	71 05       	cpc	r23, r1
 7ca:	51 f7       	brne	.-44     	; 0x7a0 <timer_500mSec+0x38>
		 if (reset==1)
		 {
			 break;
		 }
	 }
	 TCNT0 = periodic_500m_Sec;
 7cc:	8c ed       	ldi	r24, 0xDC	; 220
 7ce:	82 bf       	out	0x32, r24	; 50
	 counter = 0;
	 return timer_state ;
	 
 }
 7d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7d4:	08 95       	ret

000007d6 <timer_250mSec>:
 u8 timer_250mSec (void)
 {
	 timer_state = ok ;
 7d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	 /*for normal mode */
	 TCCR2 = CLR_BIT(TCCR2,TCCR2_WGM20);
 7da:	85 b5       	in	r24, 0x25	; 37
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	85 bd       	out	0x25, r24	; 37
 7e0:	85 bd       	out	0x25, r24	; 37
	 TCCR2 = CLR_BIT(TCCR2,TCCR2_WGM21);
 7e2:	85 b5       	in	r24, 0x25	; 37
 7e4:	87 7f       	andi	r24, 0xF7	; 247
 7e6:	85 bd       	out	0x25, r24	; 37
 7e8:	85 bd       	out	0x25, r24	; 37
	 TCNT2 = periodic_250m_Sec;
 7ea:	8e ee       	ldi	r24, 0xEE	; 238
 7ec:	84 bd       	out	0x24, r24	; 36
	 
	 /*for 8 prescaler */
	 TCCR2=CLR_BIT(TCCR2,TCCR2_CS22);
 7ee:	85 b5       	in	r24, 0x25	; 37
 7f0:	8b 7f       	andi	r24, 0xFB	; 251
 7f2:	85 bd       	out	0x25, r24	; 37
 7f4:	85 bd       	out	0x25, r24	; 37
	 TCCR2=SET_BIT(TCCR2,TCCR2_CS21);
 7f6:	85 b5       	in	r24, 0x25	; 37
 7f8:	82 60       	ori	r24, 0x02	; 2
 7fa:	85 bd       	out	0x25, r24	; 37
 7fc:	85 bd       	out	0x25, r24	; 37
	 TCCR2=CLR_BIT(TCCR2,TCCR2_CS20);
 7fe:	85 b5       	in	r24, 0x25	; 37
 800:	8e 7f       	andi	r24, 0xFE	; 254
 802:	85 bd       	out	0x25, r24	; 37
 804:	85 bd       	out	0x25, r24	; 37
	 u32 counter = 0 ;
 806:	40 e0       	ldi	r20, 0x00	; 0
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	ba 01       	movw	r22, r20
	 while (counter!=no_of_over_flow_for_250m_Sec)
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
	 {
		 while((TIFR=GET_BIT(TIFR,TOV2))==0);
 80e:	88 b7       	in	r24, 0x38	; 56
 810:	80 74       	andi	r24, 0x40	; 64
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	08 2e       	mov	r0, r24
 816:	89 2f       	mov	r24, r25
 818:	00 0c       	add	r0, r0
 81a:	88 1f       	adc	r24, r24
 81c:	99 0b       	sbc	r25, r25
 81e:	00 0c       	add	r0, r0
 820:	88 1f       	adc	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	88 bf       	out	0x38, r24	; 56
 826:	89 2b       	or	r24, r25
 828:	91 f3       	breq	.-28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		 TIFR = SET_BIT(TIFR,TOV2);
 82a:	88 b7       	in	r24, 0x38	; 56
 82c:	80 64       	ori	r24, 0x40	; 64
 82e:	88 bf       	out	0x38, r24	; 56
 830:	88 bf       	out	0x38, r24	; 56
		 counter++;
 832:	4f 5f       	subi	r20, 0xFF	; 255
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	6f 4f       	sbci	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
	 /*for 8 prescaler */
	 TCCR2=CLR_BIT(TCCR2,TCCR2_CS22);
	 TCCR2=SET_BIT(TCCR2,TCCR2_CS21);
	 TCCR2=CLR_BIT(TCCR2,TCCR2_CS20);
	 u32 counter = 0 ;
	 while (counter!=no_of_over_flow_for_250m_Sec)
 83a:	4b 37       	cpi	r20, 0x7B	; 123
 83c:	51 05       	cpc	r21, r1
 83e:	61 05       	cpc	r22, r1
 840:	71 05       	cpc	r23, r1
 842:	29 f7       	brne	.-54     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	 {
		 while((TIFR=GET_BIT(TIFR,TOV2))==0);
		 TIFR = SET_BIT(TIFR,TOV2);
		 counter++;
	 }
	 TCNT2 = periodic_250m_Sec;
 844:	8e ee       	ldi	r24, 0xEE	; 238
 846:	84 bd       	out	0x24, r24	; 36
	 counter = 0;
	 return timer_state ; 
 }
 848:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 84c:	08 95       	ret

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
